---
- name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago
  ansible.builtin.apt:
    update_cache: no
    cache_valid_time: 3600

- name: Проверка наличия файла конфигурации OpenVPN
  ansible.builtin.stat:
    path: /etc/openvpn/client.conf
  register: openvpn_config

- name: Определение переменной ip_add если файл отсутствует
  set_fact:
    ip_add: "127.0.0.1"
  when: not openvpn_config.stat.exists

- name: Получение IP-адреса интерфейса tun0
  block:
    - name: Pause for 1 minutes to OpenVPN up
      ansible.builtin.pause:
        minutes: 1

    - name: Task #1
      shell: ip addr show tun0 | grep -oP 'inet \K[\d.]+'
      register: ip_add_output
      ignore_errors: yes

    - name: Установка переменной для IP-адреса ip_add
      set_fact:
        ip_add: "{{ ip_add_output.stdout }}"

    - name: Отображение IP-адреса интерфейса
      ansible.builtin.debug:
        msg: "IP-адрес интерфейса: {{ ip_add }}"
  when: openvpn_config.stat.exists

- name: install packages
  ansible.builtin.apt:
    pkg:
    - libpq-dev 
    - python3-dev
    - python3-docker
    - python3-pip
    - nginx 
    - certbot
    - python3-certbot-nginx 
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg2
    - software-properties-common
    - htop
    - bash-completion

- name: Download Docker Install Script
  shell: curl -fsSL https://get.docker.com > /tmp/get-docker.sh && sh /tmp/get-docker.sh
  tags:
    - docker_install

- name: Pause for done installation docker
  ansible.builtin.pause:
    minutes: 3

- name: Add Docker to autostart
  shell: systemctl enable docker.service && systemctl enable containerd.service
  tags:
    - docker_install

- name: Verify Docker Compose installation
  shell: docker compose --version
  register: result

- name: Display Docker Compose version
  debug:
    var: result.stdout

- name: vm.max_map_count
  shell: echo "vm.max_map_count=262144" >> /etc/sysctl.conf && sysctl -p

- name: create a directory /opt/minervakms
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /opt/minervakms
    - /opt/elasticsearch
    - /opt/redis
    - /opt/postgresql
    - /opt/minervakms/core
    - /opt/minervakms/converter
    - /opt/minervakms/frontend
    - /opt/minervakms/discovery
    - /opt/minervakms/report
    - /opt/minervakms/search
    - /opt/minervakms/migrator-confluence
    - /opt/minervakms/migrator-confluence/resources
#    - /backups
  tags:
    - configs

- name: create a directory resources and tmp
  file:
    path: "{{ item }}"
    state: directory
    mode: '0777'
  loop:
    - /opt/minervakms/resources
    - /opt/minervakms/tmp
    - /backups
  tags:
    - configs


- name: create the data directory for ElasticSearch
  file:
    path: '/opt/elasticsearch/data'
    state: directory
    mode: '0777'
  tags:
    - configs

- name: copy application.properties files and nginx configuration
  template:
    mode: '0644'
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  loop:
    - { src: '.env-elastic.j2',                     dest: '/opt/elasticsearch/.env' }
#    - { src: '.env-postgresql.j2',                  dest: '/opt/postgresql/.env' }
    - { src: '.env.j2',                             dest: '/opt/minervakms/.env' }
    - { src: 'docker-compose.yml.j2',               dest: '/opt/minervakms/docker-compose.yml' }
    - { src: 'docker-compose-elas.yml.j2',          dest: '/opt/elasticsearch/docker-compose.yml' }
    - { src: 'docker-compose-redis.yml.j2',         dest: '/opt/redis/docker-compose.yml' }
    - { src: 'docker-compose-psql.yml.j2',          dest: '/opt/postgresql/docker-compose.yml' } 
    - { src: 'core.application.properties.j2',      dest: '/opt/minervakms/core/application.properties' }
    - { src: 'converter.application.properties.j2', dest: '/opt/minervakms/converter/application.properties' }
    - { src: 'discovery.application.properties.j2', dest: '/opt/minervakms/discovery/application.properties' }
    - { src: 'report.application.properties.j2',    dest: '/opt/minervakms/report/application.properties' }
    - { src: 'search.application.properties.j2',    dest: '/opt/minervakms/search/application.properties' }
    - { src: 'minerva-nginx.conf.j2',               dest: '/opt/minervakms/frontend/nginx.conf' }
    - { src: 'minervakms.conf.j2',                  dest: '/opt/minervakms/frontend/minervakms.conf' }  
    - { src: 'global-config.js.j2',                 dest: '/opt/minervakms/frontend/global-config.js' }
    - { src: 'nginx.conf.j2',                       dest: '/etc/nginx/nginx.conf' }
    - { src: 'queries.sql.j2',                      dest: '/tmp/queries.sql' }
    - { src: 'migrator.application.properties.j2',  dest: '/opt/minervakms/migrator-confluence/application.properties' }
    - { src: '.bashrc.j2',                          dest: '/root/.bashrc' }
  tags:
    - configs

- name: create a LDAP directory ( optional )
  file:
    path: '/opt/minervakms/ldap'
    state: directory
    mode: '0755'
  when: ldap_service=='yes'

- name: copy LDAP application.properties files and nginx configuration ( optional )
  template:
    mode: '0644'
    src: 'ldap.application.properties.j2'
    dest: '/opt/minervakms/ldap/application.properties'
  when: ldap_service=='yes'

- name: Change owner of the folder /opt/minervakms/resources and /opt/minervakms/tmp
  file:
    state: directory
    recurse: yes
    path: "{{ item }}"
    owner: nobody
  with_items:
    - /opt/minervakms/resources
    - /opt/minervakms/tmp
    - /opt/minervakms/migrator-confluence/resources
    - /opt/elasticsearch/data
  when: (ansible_distribution == "Debian" ) or (ansible_distribution == "Astra Linux")
  tags:
    - configs

- name: Add ansible to docker group
  become: yes
  ansible.builtin.user:
    name: ansible
    groups: docker
    append: yes

- name: Reset ssh connection to allow user changes to affect ansible user
  ansible.builtin.meta:
    reset_connection

- name: Log into private registry and force re-authorization
  docker_login:
    registry: https://registry.minervasoft.ru
    username: kms
    password: "{{ registry_pass }}"
    timeout: 60

- name: Create a network
  docker_network:
    name: minervanet

- name: Up docker containers
  shell: "docker compose -f /opt/redis/docker-compose.yml up -d"
  tags: 
    - redisup
  retries: 5
  delay: 60

- name: up docker psql
  shell: "docker compose -f /opt/postgresql/docker-compose.yml up -d"
  tags:
    - psqlup
  retries: 5
  delay: 60


- name: up docker elasticsearch
  shell: "docker compose -f /opt/elasticsearch/docker-compose.yml up -d"
  tags:
    - esup
  retries: 5
  delay: 60


- name: up docker minerva
  shell: "docker compose -f /opt/minervakms/docker-compose.yml up -d"
  tags:
    - minup
  retries: 5
  delay: 60


- name: Copy queries.sql into postgresql container
  shell: "docker cp /tmp/queries.sql postgresql:/tmp/queries.sql"
  tags:
    - psql

- name: Pause for 3 minutes to mincore up
  ansible.builtin.pause:
    minutes: 3

- name: Insert data to DB
  shell: "docker exec -i postgresql  psql -U {{ postgres_user }} -d {{ postgres_db }} -f /tmp/queries.sql && docker exec -i postgresql  psql -U {{ postgres_user }} -c 'create schema minconfluence'" 
  register: psql_output

- debug:
    var=psql_output

- name: Copy SSL certificates if domain_name matches "*.minervasoft.ru"
  block:
    - name: Create directory for SSL certificates
      file:
        path: "/etc/nginx/certs/"
        state: directory

    - name: Copy SSL certificate
      copy:
        src: "/opt/ansible/roles/install-client-new/templates/cert/fullchain.pem"
        dest: "/etc/nginx/certs/fullchain.pem"

    - name: Copy SSL private key
      copy:
        src: "/opt/ansible/roles/install-client-new/templates/cert/fullchain.key"
        dest: "/etc/nginx/certs/fullchain.key"

    - name: Copy nginx configuration
      template:
        mode: '0644'
        src: 'nginx1/minerva.conf.j2'
        dest: '/etc/nginx/conf.d/minerva.conf'
      tags:
        - configs
  when: "'minervasoft.ru' in domain_name"

- name: Copy nginx configuration before generating SSL certificate
  block:
    - name: Copy nginx configuration cerbot
      template:
        mode: '0644'
        src: 'nginx2/minerva.conf.j2'
        dest: '/etc/nginx/conf.d/minerva.conf'
      tags:
        - configs
        - certbot

    - name: Generate new SSL certificate if domain_name does not match "*.minervasoft.ru"
      shell: "certbot --nginx --noninteractive --agree-tos --email admins@minervasoft.ru -d {{ domain_name }}"
      tags:
        - certbot
  when: "'minervasoft.ru' not in domain_name"

- name: Remove default Nginx configuration
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  tags:
    - nginx

- name: Restart nginx
  service:
    name: nginx
    state: restarted
    enabled: yes

- name: Пауза 3 минуты перед выполнением Remap
  ansible.builtin.pause:
    minutes: 3

- name: Remap
  shell: 'curl --location --request POST "http://{{ ip_add }}:20100/private/elastic/remap"'
  retries: 5
  delay: 60