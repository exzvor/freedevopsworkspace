---
- name: Add users | create users, shell, home dirs
  user:
    name: "{{ item.username }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    update_password: "{{ item.update_password if item.update_password is defined else default_update_password }}"
    shell: "{{ item.shell if item.shell is defined else default_shell }}"
    createhome: yes
    comment: "{{ item.comment if item.comment is defined else '' }}"
    state: present
  when: (item.user_state == 'present' or item.user_state == 'lock')
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}, password: {{ 'True' if item.password is defined else 'False' }}, update_password: {{ item.update_password if item.update_password is defined else default_update_password }}"

- name: SSH Keys | Add authorized key for ssh key authentication
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.ssh_key }}"
    exclusive: "{{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'no' }}"
    path: "{{ '/home/' + item.username + '/.ssh/authorized_keys' if ansible_check_mode else omit }}"
    state: present
  when: item.ssh_key is defined
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, ssh_key: {{ 'True' if item.ssh_key is defined else 'False' }}, exclusive_ssh_key: {{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'False' }}" # noqa 204

- name: Sudo | add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^{{ item.username }} '
#    line: '{{ item.username }} ALL=(ALL) NOPASSWD:ALL'
    line: "{{ item.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.use_sudo_nopass|d(false) )  else '' }}ALL"
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  # TODO: Fix literal compare
  when: item.use_sudo|d(false)|bool == true
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, use_sudo: {{ item.use_sudo|d(false) }}, use_sudo_nopass: {{ item.use_sudo_nopass|d(false) }}"
      #- name: copy config files
      #  template:
      #    mode: '0644'
      #    src: '{{ item.src }}'
      #    dest: '{{ item.dest }}'
      #  loop:
      #    - { src: '.sshd_config.j2',                     dest: '/etc/ssh/sshd_config' }
    # - { src: '.env-postgresql.j2',                  dest: '/opt/postgresql/.env' }
    #- name: restart sshd
    #  service: sshd
    #  state: restarted
    #  enable: yes